import requests
from bs4 import BeautifulSoup
import re

class VulnerabilityScanner:
    def __init__(self, url):
        self.url = url
        self.vulnerabilities = []

    def scan_sql_injection(self):
        test_payloads = ["'", "\"", "' OR '1'='1", "\" OR \"1\"=\"1"]
        for payload in test_payloads:
            full_url = self.url + payload
            response = requests.get(full_url)
            if "error" in response.text or "syntax" in response.text:
                self.vulnerabilities.append(f"Possible SQL Injection: {full_url}")
    
    def scan_xss(self):
        test_payloads = ["<script>alert(1)</script>", "<img src=x onerror=alert(1)>"]
        response = requests.get(self.url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        for form in forms:
            action = form.get('action')
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')
            for payload in test_payloads:
                data = {input.get('name'): payload for input in inputs}
                if method == 'post':
                    response = requests.post(action, data=data)
                else:
                    response = requests.get(action, params=data)
                if payload in response.text:
                    self.vulnerabilities.append(f"Possible XSS: {action} with payload {payload}")

    def generate_report(self):
        if not self.vulnerabilities:
            print("No vulnerabilities found.")
        else:
            print("Vulnerabilities found:")
            for vulnerability in self.vulnerabilities:
                print(vulnerability)
    
    def suggest_mitigation(self):
        if self.vulnerabilities:
            print("\nMitigation Strategies:")
            print("1. Use parameterized queries to prevent SQL injection.")
            print("2. Encode output to prevent XSS.")
            print("3. Implement input validation and sanitization.")
            print("4. Use security headers (e.g., Content Security Policy).")

if __name__ == "__main__":
    target_url = input("Enter the URL to scan: ")
    scanner = VulnerabilityScanner(target_url)
    scanner.scan_sql_injection()
    scanner.scan_xss()
    scanner.generate_report()
    scanner.suggest_mitigation()